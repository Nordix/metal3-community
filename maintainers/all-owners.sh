#!/usr/bin/env bash
#
# usage: ./all-owners.sh > ALL-OWNERS
#

set -eu

# repos and which branch is the default
declare -a REPOS=(
    baremetal-operator
    cluster-api-provider-metal3
    community
    ip-address-manager
    ironic-client
    ironic-hardware-inventory-recorder-image
    ironic-image
    ironic-ipa-downloader
    ironic-standalone-operator
    mariadb-image
    metal3-dev-env
    metal3-docs
    metal3-io.github.io
    project-infra
    utility-images
)

declare -a OWNER_TYPES=(
    approvers
)

declare -a CURL_OPTS=(
    --silent
)

# check dependencies are in place - yq is not commonly available
# as os package, and yq from Ubuntu snap is incompatible
INSTALL_URL="https://github.com/mikefarah/yq/issues/488"
command -v yq &>/dev/null || { echo >&2 "fatal: yq not found: see ${INSTALL_URL}"; exit 1; }

all_owners_raw()
{
    local owner_type maintainer_group filter

    owner_type="$1"

    for repo in "${REPOS[@]}"; do
        if [[ "${repo}" = "metal3-io.github.io" ]]; then
            filter=".filters.\".*\".${owner_type}"
            maintainer_group="metal3-io-github-io-maintainers"
        else
            filter=".${owner_type}"
            maintainer_group="${repo}-maintainers"
        fi

        branch=$(git remote show "https://github.com/metal3-io/${repo}" | sed -n '/HEAD branch/s/.*: //p')

        # NOTE: yq -y is not supported by any recent version of yq
        # get direct approvers
        curl "${CURL_OPTS[@]}" \
            "https://raw.githubusercontent.com/metal3-io/${repo}/${branch}/OWNERS" | \
            yq "${filter}"
        # get approvers via alias
        curl "${CURL_OPTS[@]}" \
            "https://raw.githubusercontent.com/metal3-io/${repo}/${branch}/OWNERS_ALIASES" | \
            yq ".aliases.${maintainer_group}"
    done
}

# Find e-mail address of the committer based on their name and DCO metadata
find_mail()
{
    local mail name
    name="$1"
    for repo in "${REPOS[@]}"; do
        cd "${repo}.git"
        mail=$(git log --grep="$name" -n 1 | grep "Signed" | sed -e 's/.*<\(.*\)>/\1/g')
        cd ..
        if [[ -n "${mail}" ]]; then
            break
        fi
    done
    echo "${mail}"
}

# The idea is to match 3 sources of truth against each other, the DCO
# signatures, the CNCF maintainer spread sheet, the OWNERS and OWNERS_ALIASES
# files form each repo. The beneficial side effect of such 3 way matching is
# that anomalies related to DCO, OWNERS files and the spread sheet can be
# detected and fixed in order to keep them in sync. Manual intervention might
# be required e.g. in case of folks who have never signed a DCO or represented
# under different names in different sources.
echo "# All approvers from all top-level OWNERS files, including OWNERS_ALIASES"
echo "# Generated by community/maintainers/all-owners.sh"
echo "# Each line represents an individual maintainer and the line has to"
echo "# contain the name, affiliation, GitHub handle and the e-mail of the"
echo "# maintainer."
# Download the CNCF maintainer doc and the repository metadata (not the full repo)
curl "${CURL_OPTS[@]}" "https://raw.githubusercontent.com/cncf/foundation/main/project-maintainers.csv" > "project-maintainers.csv"
for repo in "${REPOS[@]}"; do
    git clone --quiet --bare "https://github.com/metal3-io/${repo}"
done

# remove maintainers groups
for owner in "${OWNER_TYPES[@]}"; do
    echo -e "\n${owner}:"
    maintainers=$(all_owners_raw "${owner}" | \
        grep -v -- "-maintainers" | \
        grep -v "null" | \
        grep -v "\.\.\." | \
        sort -uf | sed -e 's/- //g')
    mapfile -t < <(echo "${maintainers[@]}")
    for maintainer in "${MAPFILE[@]}"; do
        # match the GitHub handle against the CNCF maintainer file
        # remove the double ',' and the windows carrige return from the lines
        individual="$(grep "${maintainer}" "project-maintainers.csv" | sed -e 's/,,//g' | sed -e 's/\r//g')"
        mail=$(find_mail "${individual%%,*}")
        echo "- ${individual}${mail}"
    done
done
